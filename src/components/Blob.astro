---
export interface Props {
	top?: string;
	left?: string;
	rotate?: string;
}

let {top = "random", left = "random", rotate = "random"} = Astro.props;

const randomID = crypto.randomUUID();
---

<div id={randomID} class:list={["blob-container"]} data-top={top} data-left={left} data-rotate={rotate}>
	<svg
		id={randomID + "_blob"}
		class="blob-gradient"
		class="blob"
		viewBox="0 0 400 400"
		width="900"
		height="900"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		version="1.1"
	>
		<defs>
			<linearGradient
				gradientTransform="rotate(150, 0.5, 0.5)"
				x1="50%"
				y1="0%"
				x2="50%"
				y2="100%"
				id="gradient-svg"
			>
				<stop stop-color="var(--tertiary-rgb)" stop-opacity="1" offset="0%"></stop>
				<stop stop-color="var(--text-rgb)" stop-opacity="1" offset="40%"> </stop>
				<stop stop-color="var(--secondary-rgb)" stop-opacity="1" offset="100%"> </stop>
			</linearGradient>
		</defs>
		<g transform="translate(150 210)">
			<path
				d="M186.5 -99.7C229.8 -32.7 244.8 58.7 209 98.1C173.2 137.5 86.6 125 21.7 112.5C-43.3 100 -86.6 87.5 -113.4 53.3C-140.3 19 -150.7 -37 -129 -91.5C-107.4 -146 -53.7 -199 8.9 -204.2C71.6 -209.3 143.2 -166.7 186.5 -99.7"
				fill="url(#gradient-svg)"></path>
		</g>
	</svg>
	<div class="blur-filter"></div>

	<script>
		const blobContainers = document.querySelectorAll(".blob-container");

		/**
		 * Set the top, left and rotate value to the SVG
		 */
		blobContainers.forEach(blobContainer => {
			const blobSVG = document.getElementById(blobContainer.id + "_blob");
			const top = (blobContainer as HTMLElement).dataset.top;
			const left = (blobContainer as HTMLElement).dataset.left;
			const rotate = (blobContainer as HTMLElement).dataset.rotate; 

			if (blobSVG != null) {
				if (top === "random") {
					blobSVG.style.top = `${(Math.floor(Math.random() * 130) - 45)}vh`;
				} else {
					blobSVG.style.top = (top as string);
				}

				if (left === "random") {
					const random = `${Math.floor(Math.random() * 140) - 50}vw`;
					blobSVG.style.left = random;

					if (random.includes("-")) blobContainer.classList.add("is-negative");
				} else {
					blobSVG.style.left = (left as string);
				}

				if (rotate === "random") {
					blobSVG.style.rotate = `${Math.random() * 360}deg`;
				} else {
					blobSVG.style.rotate = (rotate as string);
				}
			}
			
		});

		/**
		 * If not on firefox or safari, remove the blur filter
		 *
		 * On Firefor and Safari, the .blur-filter is used to create a backdrop-filter that prevent visual glitches on SVGs with blur filter
		 * On other browsers, the blur filter is removed to prevent performance issues
		 */
		const isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
		const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

		if (!isFirefox && !isSafari) {
			blobContainers.forEach((blobContainer) => {
				blobContainer?.querySelector(".blur-filter")?.remove();
			});
		}
	</script>
</div>

<style lang="scss">
	.blob-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
		z-index: -10;
		filter: blur(30px);
		pointer-events: none;

		.blob-gradient {
			position: absolute;
			display: inline-block;
			top: var(--top);
			left: var(--left);
			rotate: var(--rotate);
			z-index: -1;
			opacity: 0.7;
			filter: blur(30px);
			pointer-events: none;
		}

		.blur-filter {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			backdrop-filter: blur(30px);
			pointer-events: none;
			z-index: 1;
		}
	}

	@media (width > 1440px) {
		.blob-container.is-negative {
			.blob-gradient {
				left: calc(var(--left) * 0.5);
			}
		}
	}
	@media (width <= 768px) {
		.blob-container.is-negative {
			.blob-gradient {
				left: calc(var(--left) / 0.4);
			}
		}
	}

	@media (prefers-reduced-motion: no-preference) {
		.blob-gradient {
			animation: blob-slide-fade-in ease 2s;
		}

		@keyframes blob-slide-fade-in {
			from {
				opacity: 0;
				transform: translateY(5vh);
			}
			to {
				opacity: 0.7;
				transform: translateY(0);
			}
		}
	}
</style>
